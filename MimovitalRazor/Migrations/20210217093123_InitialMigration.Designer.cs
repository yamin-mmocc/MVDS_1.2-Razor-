// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MimovitalRazor.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MimovitalRazor.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210217093123_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MimovitalRazor.Models.CSVDataMaster", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("averagingPeriodBodyMotion")
                        .HasColumnType("double precision");

                    b.Property<double>("averagingPeriodHeart")
                        .HasColumnType("double precision");

                    b.Property<double>("averagingPeriodRespiration")
                        .HasColumnType("double precision");

                    b.Property<string>("babyID")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<long>("heartRate")
                        .HasColumnType("bigint");

                    b.Property<double>("inputGainL")
                        .HasColumnType("double precision");

                    b.Property<double>("inputGainR")
                        .HasColumnType("double precision");

                    b.Property<double>("inputOffsetL")
                        .HasColumnType("double precision");

                    b.Property<double>("inputOffsetR")
                        .HasColumnType("double precision");

                    b.Property<long>("levelBodyMotionL")
                        .HasColumnType("bigint");

                    b.Property<long>("levelBodyMotionR")
                        .HasColumnType("bigint");

                    b.Property<long>("levelHeartL")
                        .HasColumnType("bigint");

                    b.Property<long>("levelHeartR")
                        .HasColumnType("bigint");

                    b.Property<long>("levelLearnedBodyMotionL")
                        .HasColumnType("bigint");

                    b.Property<long>("levelLearnedBodyMotionR")
                        .HasColumnType("bigint");

                    b.Property<long>("levelLearnedHeartL")
                        .HasColumnType("bigint");

                    b.Property<long>("levelLearnedHeartR")
                        .HasColumnType("bigint");

                    b.Property<long>("levelLearnedRespirationL")
                        .HasColumnType("bigint");

                    b.Property<long>("levelLearnedRespirationR")
                        .HasColumnType("bigint");

                    b.Property<long>("levelRespirationL")
                        .HasColumnType("bigint");

                    b.Property<long>("levelRespirationR")
                        .HasColumnType("bigint");

                    b.Property<long>("maxBodyMotion")
                        .HasColumnType("bigint");

                    b.Property<long>("maxRespiration")
                        .HasColumnType("bigint");

                    b.Property<long>("maxlHeart")
                        .HasColumnType("bigint");

                    b.Property<long>("minBodyMotion")
                        .HasColumnType("bigint");

                    b.Property<long>("minRespiration")
                        .HasColumnType("bigint");

                    b.Property<long>("minlHeart")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("occurDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("outputGainHeartL")
                        .HasColumnType("double precision");

                    b.Property<double>("outputGainHeartR")
                        .HasColumnType("double precision");

                    b.Property<double>("outputGainRespirationL")
                        .HasColumnType("double precision");

                    b.Property<double>("outputGainRespirationR")
                        .HasColumnType("double precision");

                    b.Property<long>("respirationRate")
                        .HasColumnType("bigint");

                    b.Property<string>("roomID")
                        .HasColumnType("text");

                    b.Property<long>("sensorID")
                        .HasColumnType("bigint");

                    b.Property<string>("staffID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CSVDataMaster");
                });
#pragma warning restore 612, 618
        }
    }
}
